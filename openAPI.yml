openapi: 3.0.0
info:
  title: Open Heart API
  description: Find out more about our about Open Hearts on our official website. Coming soon
  contact:
    name: Open heart developer
    email: hey@openheartdiary.netlify.app
    url: https://openheartdiary.netlify.app
  version: 1.0.0
servers:
  - url: https://openheart-api.dalla.id/api/v1
  - url: http://localhost:8000/api/v1
tags:
  - name: users
    description: Users related endpoints
  - name: notes
    description: Access to notes/journals endpoints
paths:
  /users/register:
    post:
      tags:
        - users
      summary: Register a new user
      requestBody:
        $ref: '#/components/requestBodies/usersBody'
      responses:
        201:
          description: User created successfully
        400:
          description: Invalid body schema
        500:
          description: Server error
  /users/login:
    post:
      tags:
        - users
      summary: Login and get the token
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: afdallah.war@gmail.com
                password:
                  type: string
                  example: password
      responses:
        200:
          description: Succesfully logged in
        400:
          description: Invalid username/password
        500:
          description: Server error
  /users/unlock:
    post:
      tags:
        - users
      summary: Unlock the notes access
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                pin:
                  type: number
                  example: 12345
      responses:
        200:
          description: Succesfully unlocked
        400:
          description: Invalid pin
        500:
          description: Server error
      security:
        - BearerAuth: []
  /users:
    get:
      tags:
        - users
      summary: Get all users
      responses:
        200:
          description: A list of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Users'
        401:
          description: Unauthorized
        404:
          description: User collection is empty
  /users/me:
    get:
      tags:
        - users
      summary: Get the logged in user
      responses:
        200:
          description: The logged in user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Users'
        401:
          description: Unauthorized
        404:
          description: User not found
      security:
        - BearerAuth: []
    put:
      tags:
        - users
      summary: Update the user
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                userName:
                  type: string
                  example: Dallah
      responses:
        200:
          description: User updated successfully
        401:
          description: Unauthorized
        403:
          description: Forbidden
        400:
          description: Invalid body schema
        500:
          description: Server error
      security:
        - BearerAuth: []
  /users/{userId}:
    put:
      tags:
        - users
      parameters:
        - name: userId
          in: path
          description: ID of user to update
          required: true
          schema: { type: string }
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                userName:
                  type: string
                  example: Dallah
      summary: Update a user
      responses:
        200:
          description: User updated successfully
        403:
          description: Forbidden
        400:
          description: Invalid ID supplied
        404:
          description: Post not found
      security:
        - BearerAuth: []

    delete:
      tags:
        - users
      parameters:
        - name: userId
          in: path
          description: ID of user to delete
          required: true
          schema: { type: string }
      summary: Delete a user
      responses:
        200:
          description: User deleted successfully
        403:
          description: Forbidden
        400:
          description: Invalid body schema
        404:
          description: Post not found
      security:
        - BearerAuth: []
  /notes:
    get:
      tags:
        - notes
      summary: Get all notes
      responses:
        200:
          description: A list of notes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Notes'
        401:
          description: Unauthorized
        403:
          description: Forbidden
        404:
          description: Notes collection is empty
      security:
        - BearerAuth: []
    post:
      tags:
        - notes
      summary: Create a new note
      requestBody:
        $ref: '#/components/requestBodies/notesBody'
      responses:
        201:
          description: Note created successfully
        400:
          description: Invalid body schema
        500:
          description: Server error
      security:
        - BearerAuth: []
  /notes/{noteId}:
    get:
      tags:
        - notes
      parameters:
        - name: noteId
          in: path
          description: ID of note to get
          example: 9sdf8s9d0f7ds7fsd9f8ds9f8ds9f8ds9fsd8
          required: true
          schema: { type: string }
      summary: Get a note
      responses:
        200:
          description: Note found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Notes'
        401:
          description: Unauthorized
        403:
          description: Forbidden
        404:
          description: Note not found
      security:
        - BearerAuth: []

    put:
      tags:
        - notes
      parameters:
        - name: noteId
          in: path
          description: ID of note to update
          example: 9sdf8s9d0f7ds7fsd9f8ds9f8ds9f8ds9fsd8
          required: true
          schema: { type: string }
      summary: Update a note
      requestBody:
        $ref: '#/components/requestBodies/notesBody'
      responses:
        200:
          description: Note updated successfully
        403:
          description: Forbidden
        400:
          description: Invalid ID supplied
        404:
          description: Note not found
      security:
        - BearerAuth: []

    delete:
      tags:
        - notes
      parameters:
        - name: noteId
          in: path
          description: ID of note to delete
          example: 9sdf8s9d0f7ds7fsd9f8ds9f8ds9f8ds9fsd8
          required: true
          schema: { type: string }
      summary: Delete a note
      responses:
        200:
          description: Note deleted successfully
        403:
          description: Forbidden
        400:
          description: Invalid ID supplied
        404:
          description: Note not found
      security:
        - BearerAuth: []
components:
  requestBodies:
    usersBody:
      description: Payload for users
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              fullName:
                type: string
                example: Afdallah Wahyu Arafat
              userName:
                type: string
                example: 'afdallah'
              email:
                type: string
                example: 'afdallah.war@gmail.com'
              password:
                type: string
                example: 'password'
              passwordConfirm:
                type: string
                example: 'password'
              pin:
                type: integer
                example: 12345
                maximum: 5
              phoneNumber:
                type: string
                example: '08123456789'
              birthday:
                type: string
                example: '2020-01-01'
              gender:
                type: string
                example: male
    notesBody:
      description: Payload for notes
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              title:
                type: string
                example: Minggu kelabu
              content:
                type: string
                example: Lorem ipsum dolor sit amet, consectetur adipiscing elit.
              mood:
                type: number
                enum:
                  - 1
                  - 2
                  - 3
                  - 4
                  - 5
                example: 3
  schemas:
    Users:
      type: object
      properties:
        id:
          type: string
          example: 9sdf8s9d0f7ds7fsd9f8ds9f8ds9f8ds9fsd8
        fullName:
          type: string
          example: Afdallah Wahyu Arafat
        userName:
          type: string
          example: 'afdallah'
        email:
          type: string
          example: afdallah.war@gmail.com
        phoneNumber:
          type: string
          example: '08123456789'
        pin:
          type: number
          description: Used to unlock the notes view
          example: 12345
        birthday:
          type: string
          example: '2020-01-01'
        role:
          type: string
          enum:
            - user
            - consultant
          example: user
        gender:
          type: string
          enum:
            - male
            - female
          example: male
        token:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2MWIwZTI2M2FiMWZhYjJmMWM2ZjAwZjYiLCJpYXQiOjE2MzkzMDk2NTB9.ceA8T8HJxQWuhdqmMwoRsYHiMnhB1zrIPHIUTJEL4LE
    Notes:
      type: object
      properties:
        title:
          type: string
          example: Minggu kelabu
        content:
          type: string
          example: Lorem ipsum dolor sit amet, consectetur adipiscing elit.
        mood:
          type: number
          enum:
            - 1
            - 2
            - 3
            - 4
            - 5
          example: 3
        createdAt:
          type: string
          format: date-time
          example: 2020-01-01T00:00:00.000Z
        updatedAt:
          type: string
          format: date-time
          example: 2020-01-01T00:00:00.000Z
        user:
          $ref: '#/components/schemas/Users'
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
